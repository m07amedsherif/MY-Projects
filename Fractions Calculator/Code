// Purpose: A calculator for working with fractions
// Author: Mohamed Mahmoud Abdelbaset
// Email: mohamedmahmoud050505@gmail.com
// Author2: Mohamed Sherif Mohamed
// Email: M07amedsherif2005@gmail.com
// Author3: Emil Ehab Mosaad
// Email: emilehab2@gmail.com

#include <bits/stdc++.h>
#include <regex>

using namespace std;

// Function to simplify a fraction
string simplifyFraction(long long num, long long den){

    // Find the greatest common divisor
    long long gt = __gcd(num, den);
    num /= gt;
    den /= gt;

    // If the denominator is 1, return just the numerator
    if (den == 1){
        return to_string(num);
    }
    // Return the simplified fraction as a string
    return to_string(num) + "/" + to_string(den);
}

// Function to add two fractions
string addFractions(long long num1, long long den1, long long num2, long long den2){
    if (den1 == 0 || den2 == 0){
        return "Math Error.";
    }
    // Add the fractions and simplify the result
    return simplifyFraction(num1 * den2 + num2 * den1, den1 * den2);
}

// Function to subtract one fraction from another
string subtractFractions(long long num1, long long den1, long long num2, long long den2){
    if (den1 == 0 || den2 == 0){
        return "Math Error.";
    }
    // Subtract the fractions and simplify the result
    return simplifyFraction(num1 * den2 - num2 * den1, den1 * den2);
}

// Function to multiply two fractions
string multiplyFractions(long long num1, long long den1, long long num2, long long den2){
    if (den1 == 0 || den2 == 0){
        return "Math Error.";
    }
    // Multiply the fractions and simplify the result
    return simplifyFraction(num1 * num2, den1 * den2);
}

// Function to divide one fraction by another
string divideFractions(long long num1, long long den1, long long num2, long long den2){
    if (den1 == 0 || den2 == 0 || num2 == 0){
        return "Math Error.";
    }
    // Divide the fractions and simplify the result
    return simplifyFraction(num1 * den2, num2 * den1);
}

int main(){
    char tryAgain;
    cout << "Welcome to Rational Number Calculator" << endl;
    cout << endl;
    cout << "This program is a Rational Number Calculator that allows you to work with fractions.\n";
    cout << "This program is including negative numbers and integers.\n";
    cout << "You can add, subtract, multiply, and divide fractions by this format 'numerator/denominator' and choosing an operation (+, -, *, /).\n";
    cout << "The program simplifies the result for you.\n";
    cout << endl;

    do {

        string input;
        cout << "Menu:" << endl;
        cout << "1.Add two fractions (Operation with (+))" << endl;
        cout << "2.Subtract one fraction from another  (Operation with (-))" << endl;
        cout << "3.Multiply two fractions (Operation with (*))" << endl;
        cout << "4.Divide one fraction by another (Operation with (/))" << endl;
        cout << "5.Exit" << endl;
        cout << endl;
        cout << "Please enter a rational number operation (or 'exit' to quit):" << endl;
        getline(cin, input);

        // Check if the user wants to exit
        if (input == "exit"){
            cout << "Thank you for using the rational number calculator." << endl;
            break;
        }


        // Regular expression pattern to match the input
        regex pattern("([+-]?\\d+)(?:\\/([+-]?\\d+))? ([+\\-*/]) ([+-]?\\d+)(?:\\/([+-]?\\d+))?");
        smatch matches;

        // Check if the input matches the pattern
        if (regex_match(input, matches, pattern)){
            long long num1 = stoll(matches[1]);
            long long den1 = matches[2].length() ? stoll(matches[2]) : 1;
            char operation = matches[3].str()[0];
            long long num2 = stoll(matches[4]);
            long long den2 = matches[5].length() ? stoll(matches[5]) : 1;

            string result;
            // Perform the operation based on the operator
            switch (operation){
                case '+':
                    result = addFractions(num1, den1, num2, den2);
                    break;
                case '-':
                    result = subtractFractions(num1, den1, num2, den2);
                    break;
                case '*':
                    result = multiplyFractions(num1, den1, num2, den2);
                    break;
                case '/':
                    result = divideFractions(num1, den1, num2, den2);
                    break;

                default:
                    result = "Invalid operation. Try again.";
                    break;
            }

            cout << "= " << result << endl;
        }
        else{
            cout << "Invalid operand. Try again." << endl;
        }

        // Ask the user if he wants to try again
        cout << "0.Do you want to try again?: ";
        cin >> tryAgain;
        cin.ignore();
    } while (tryAgain == '0');

    cout << "Thank you for using the rational number calculator." << endl;
    cout << "Exiting. Goodbye!" << endl;

    return 0;
}


// pseudo code algorithm Link
/*
https://drive.google.com/file/d/1ITchTWBWklCP0xZgZVJfGdiLaQIavaqK/view?usp=sharing
 */
